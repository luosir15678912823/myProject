package com.nightly.lovetravel.fragment;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.location.Criteria;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.annotation.Nullable;
import android.support.design.widget.Snackbar;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AnimationUtils;
import android.view.animation.LayoutAnimationController;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.Address;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.handmark.pulltorefresh.library.ILoadingLayout;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.nightly.lovetravel.MainActivity;
import com.nightly.lovetravel.NetworkReceiver;
import com.nightly.lovetravel.R;
import com.nightly.lovetravel.adapter.SearchResultAdapter;
import com.nightly.lovetravel.bean.AttractionsBean;
import com.nightly.lovetravel.util.HttpUtil;
import com.nightly.lovetravel.util.JsonUtil;
import com.nightly.lovetravel.util.ThreadUtil;

import org.greenrobot.eventbus.EventBus;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import butterknife.BindView;
import butterknife.ButterKnife;
import butterknife.OnClick;


/**
 * Created by Nightly on 2016/10/21.
 */

public class MainFragment extends Fragment implements SearchResultAdapter.OnItemClickListener, BDLocationListener, NetworkReceiver.NetWorkChangeListener {

    private final String TAG = "test";
    private final int MSG_DATA_GOT = 1;
    private final int MSG_LOCATION_GOT = 2;
    @BindView(R.id.tvMenu)
    TextView tvMenu;
    @BindView(R.id.tvSear)
    TextView tvSear;
    @BindView(R.id.tvLocation)
    TextView tvLocation;
    @BindView(R.id.pbLocation)
    ProgressBar pbLocation;
    @BindView(R.id.tvLocated)
    TextView tvLocated;
    @BindView(R.id.tvNetworkState)
    TextView tvNetworkState;
    @BindView(R.id.ptrResult)
    PullToRefreshListView ptrResult;
    @BindView(R.id.pb)
    ProgressBar pb;

    private View view;
    private int currentPage = 1;
    private int previousSize = 0;
    private SharedPreferences sharedPreferences;
    private List<AttractionsBean.ShowapiResBodyBean.PagebeanBean.ContentlistBean> data = null;
    private SearchFragment searchFragment;
    private DetailFragment detailFragment;
    private SearchResultAdapter searchResultAdapter;
    private static String MAIN_SP_NAME = "MainFragmentJson";
    private static String ATTRACTION_BEAN = "MainFragment";
    private static boolean isDataChange = false;
    private String json = "";
    private HotelListFragment hotelListFragment;
    private LocationClient mLocationClient;
    private boolean isFirstLoadItem = true;
    //    public BDLocationListener myListener = new MyLocationListener();
    private NetworkReceiver networkReceiver;

    private Handler handler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case MSG_DATA_GOT:
                    final String json = (String) msg.obj;
                    if (view != null) {
                        dealJson(json);
                    } else {
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                dealJson(json);
                            }
                        }, 2000);
                    }
                    break;
                    /*
                    bundle.putDouble("longitude",longitude);//经度
                    bundle.putDouble("latitude",latitude);//纬度
                    bundle.putString("city",city);
                    bundle.putString("addrStr",addrStr);
                     */
                case MSG_LOCATION_GOT:
                    pbLocation.setVisibility(View.GONE);
                    Bundle bundle = (Bundle) msg.obj;
                    dealLocated(bundle);
                    break;
            }
        }
    };

    private void dealLocated(Bundle bundle) {
        String city = bundle.getString("city", "");
//        double longitude = bundle.getDouble("longitude");
//        double latitude = bundle.getDouble("latitude");
//        Log.e(TAG, "andleMessage: city=" + city + ",longitude=" + longitude + ",latitude=" + latitude);
        if (!"".equals(city)) {
            tvLocation.setText(city);
            getJson(city.substring(0, city.length() - 1), currentPage);
        } else {
            tvLocation.setText("定位失败，请重试。");
        }
    }

    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        sharedPreferences = getContext().getSharedPreferences(MAIN_SP_NAME, Context.MODE_PRIVATE);
//        Log.e(TAG, "onCreate: sharedPreferences=" + sharedPreferences);
        json = sharedPreferences.getString(ATTRACTION_BEAN, "");
        sendMessage(json, MSG_DATA_GOT);
        networkReceiver = new NetworkReceiver();
        getActivity().registerReceiver(networkReceiver, new IntentFilter(NetworkReceiver.NETWORK_INTENT_ACTION));
        networkReceiver.setListener(this);
//        Log.e(TAG, "onCreate: 当前线程："+Thread.currentThread().getName());
        mLocationClient = new LocationClient(getActivity().getApplicationContext());
        initLocation();
        mLocationClient.registerLocationListener(this);
        mLocationClient.start();
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable final ViewGroup container, @Nullable Bundle savedInstanceState) {
        if (view == null) {
            view = inflater.inflate(R.layout.fragment_main, container, false);
            ButterKnife.bind(this, view);
        }
        pb.setVisibility(View.VISIBLE);
        if ("".equals(json)) {
            dealJson(json);
        }
        setPtrResultDownAttrs();
        setPtrResultUpAttrs();
        ptrResult.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {
            @Override
            public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
                ptrResult.onRefreshComplete();
            }

            @Override
            public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {
                String string = tvLocation.getText().toString();
                String keyword = string.substring(0, string.length() - 1);
                if (currentPage == 1) {
                    getJson(keyword, currentPage);
                } else {
                    getJson(keyword, ++currentPage);
                }
            }
        });
        return view;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        getActivity().unregisterReceiver(networkReceiver);
    }

    /**
     * 根据位置信息获取数据
     */
    private void getJson(final String keyword, final int page) {
//        final String keyword = tvLocation.getText().toString();
        ThreadUtil.execute(new Runnable() {
            @Override
            public void run() {
                String newJson = HttpUtil.getAttractions(keyword, page);
                if (json.equals(newJson)) {
                    return;
                }
                if (currentPage == 1) {
                    sharedPreferences.edit().putString(ATTRACTION_BEAN, newJson).commit();
                }
                Log.e(TAG, "run: json:" + newJson);
                sendMessage(newJson, MSG_DATA_GOT);
            }
        });
    }

    /**
     * json处理
     *
     * @param json
     */
    private void dealJson(String json) {
        AttractionsBean attractionsBean = JsonUtil.parseAttractionsBean(json);
        if (attractionsBean != null && attractionsBean.getShowapi_res_body().getPagebean() != null && attractionsBean.getShowapi_res_body().getPagebean().getContentlist() != null) {
            if (data == null) {
                data = new ArrayList<>();
            }
            previousSize = data.size();
            data.addAll(data.size(), attractionsBean.getShowapi_res_body().getPagebean().getContentlist());
            if (!isDataChange) {
                searchResultAdapter = new SearchResultAdapter(getActivity(), data);
                searchResultAdapter.setListener(this);
                ptrResult.setAdapter(searchResultAdapter);
                isDataChange = true;
            } else {
                searchResultAdapter.notifyDataSetChanged();
            }
            currentPage++;
//            searchResultAdapter.notifyDataSetChanged();
            pb.setVisibility(View.GONE);
            if (currentPage > 1) {
                ptrResult.getRefreshableView().setSelection(previousSize + 1);//滚动到上一页的最后一个item
            }
        } else {
            Toast.makeText(getActivity().getApplicationContext(), "出了点小问题，稍等一下哈...", Toast.LENGTH_SHORT).show();
            pb.setVisibility(View.GONE);
        }

        /**
         * item进入动画
         */
        if (isFirstLoadItem) {
            LayoutAnimationController lac = new LayoutAnimationController(AnimationUtils.loadAnimation(getContext(), R.anim.leftward_enter), 0.1f);
            ptrResult.setLayoutAnimation(lac);
            isFirstLoadItem = false;
        }
        ptrResult.onRefreshComplete();
    }

    /**
     * 给handler发送消息
     *
     * @param json
     * @param what
     */

    private void sendMessage(String json, int what) {
        Message message = handler.obtainMessage();
        message.what = what;
        message.obj = json;
        handler.sendMessage(message);
    }

    /**
     * 给handler发送对象
     *
     * @param object
     * @param what
     */

    private void sendMessage(Object object, int what) {
        Message message = handler.obtainMessage();
        message.what = what;
        message.obj = object;
        handler.sendMessage(message);
    }

    /**
     * 给ptrResult设置上拉加载属性
     */
    private void setPtrResultUpAttrs() {
        ptrResult.setMode(PullToRefreshBase.Mode.PULL_FROM_END);
        ILoadingLayout loadingLayoutProxy = ptrResult.getLoadingLayoutProxy();
        loadingLayoutProxy.setPullLabel("加载下一页");
        loadingLayoutProxy.setReleaseLabel("释放以更新数据");
        loadingLayoutProxy.setRefreshingLabel("正在加载");
        loadingLayoutProxy.setLastUpdatedLabel("上次更新 " + new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()));
        loadingLayoutProxy.setLoadingDrawable(getResources().getDrawable(R.mipmap.refresh_big));
    }

    /**
     * 给ptrResult设置下拉加载属性
     */
    private void setPtrResultDownAttrs() {
        ptrResult.setMode(PullToRefreshBase.Mode.PULL_FROM_START);
        ILoadingLayout loadingLayoutProxy = ptrResult.getLoadingLayoutProxy();
        loadingLayoutProxy.setPullLabel("下拉刷新");
        loadingLayoutProxy.setReleaseLabel("释放以更新数据");
        loadingLayoutProxy.setRefreshingLabel("正在加载");
        loadingLayoutProxy.setLastUpdatedLabel("上次更新 " + new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date()));
        loadingLayoutProxy.setLoadingDrawable(getResources().getDrawable(R.mipmap.refresh_big));
    }

    /**
     * 搜索按钮事件，仅跳转至搜索页面
     *
     * @param view
     */
    @OnClick(R.id.tvSear)
    public void onTvSearClick(View view) {
        searchFragment = new SearchFragment();
        searchFragment.setMainFragment(this);
        getFragmentManager()
                .beginTransaction()
                .setCustomAnimations(R.anim.fragment_right_to_left_enter, R.anim.fragment_right_to_left_exit)
                .add(R.id.fm, searchFragment)
                .commit();
    }

    /**
     * 定位按钮事件
     *
     * @param view
     */
    @OnClick(R.id.tvLocated)
    public void onTvLocatedClick(View view) {
//        getLocation(view);
        /**
         * start：启动定位SDK。 stop：关闭定位SDK。调用start之后只需要等待定位结果自动回调即可。
         * 开发者定位场景如果是单次定位的场景，在收到定位结果之后直接调用stop函数即可。
         * 如果stop之后仍然想进行定位，可以再次start等待定位结果回调即可。
         * 如果开发者想按照自己逻辑请求定位，可以在start之后按照自己的逻辑请求locationclient.requestLocation()函数，
         * 会主动触发定位SDK内部定位逻辑，等待定位回调即可。
         */
        tvLocation.setText("正在定位...");
        pbLocation.setVisibility(View.VISIBLE);
        mLocationClient.start();
        mLocationClient.requestLocation();
    }
    private void getLocation(final View view) {
        pbLocation.setVisibility(View.VISIBLE);
        LocationManager locationManager = (LocationManager) getActivity().getSystemService(Context.LOCATION_SERVICE);
        if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
            Criteria criteria = new Criteria();
            criteria.setAccuracy(Criteria.ACCURACY_FINE);//高精度
            criteria.setAltitudeRequired(false);
            criteria.setBearingRequired(false);
            criteria.setCostAllowed(true);
            criteria.setPowerRequirement(Criteria.POWER_LOW);//低功耗
            String provider = locationManager.getBestProvider(criteria, true);//获取GPS信息
            //权限检查

            if (ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                // TODO: Consider calling
                //    ActivityCompat#requestPermissions
                // here to request the missing permissions, and then overriding
                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,
                //                                          int[] grantResults)
                // to handle the case where the user grants the permission. See the documentation
                // for ActivityCompat#requestPermissions for more details.
                return;
            }
            android.location.Location location = locationManager.getLastKnownLocation(provider);//通过GPS获取位置信息
            //GPS获取的位置不为空
            if (location != null) {
                final double latitude = location.getLatitude();//获取纬度
                final double longitude = location.getLongitude();//获取经度
                ThreadUtil.execute(new Runnable() {
                    @Override
                    public void run() {
                        String address = HttpUtil.getAddress(latitude, longitude);
                        sendMessage(address, MSG_LOCATION_GOT);
                    }
                });
            } else {
                //GPS定位失败，改用基站定位
                Snackbar.make(view, "定位失败，是否重试？", Snackbar.LENGTH_LONG)
                        .setAction("确定", new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                getLocation(view);
                            }
                        })
                        .show();
            }
        } else {
            Snackbar.make(view, "GPS未打开，是否去开启？", Snackbar.LENGTH_LONG)
                    .setAction("确定", new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            //打开设置页面，设置完成后返回本页面
                            Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                            startActivityForResult(intent, 0);
                        }
                    })
                    .show();
        }
    }

    /**
     * 菜单按钮
     *
     * @param view
     */
    @OnClick(R.id.tvMenu)
    public void onTvMenuClick(View view) {
        ThreadUtil.execute(new Runnable() {
            @Override
            public void run() {
                postTvMenuClick();
            }
        });
    }

    //发布事件
    public void postTvMenuClick() {
        EventBus.getDefault().post(MainActivity.SHOW_MENU);
    }

    /**
     * 查看附近酒店按钮
     *
     * @param position
     */
    @Override
    public void OnTvHotelClick(int position) {
        if (hotelListFragment == null) {
            hotelListFragment = new HotelListFragment();
        }
        final AttractionsBean.ShowapiResBodyBean.PagebeanBean.ContentlistBean contentlistBean = data.get(position);
        String cityId = contentlistBean.getCityId();
        AttractionsBean.ShowapiResBodyBean.PagebeanBean.ContentlistBean.LocationBean location = contentlistBean.getLocation();
        String lon = location.getLon();
        String lat = location.getLat();
        Bundle bundle = new Bundle();
        bundle.putString("cityId", cityId);
        bundle.putString("lon", lon);
        bundle.putString("lat", lat);
        hotelListFragment.setArguments(bundle);
        hotelListFragment.setCityHotelBean(null);
        hotelListFragment.setFragment(this);
        getFragmentManager()
                .beginTransaction()
                .setCustomAnimations(R.anim.fragment_right_to_left_enter, R.anim.fragment_right_to_left_exit)
                .replace(R.id.fm, hotelListFragment)
                .commit();
    }

    /**
     * 查看景点详情按钮
     *
     * @param position
     */
    @Override
    public void OnTvDetailClick(int position) {
        AttractionsBean.ShowapiResBodyBean.PagebeanBean.ContentlistBean contentlistBean = data.get(position);
        if (detailFragment == null) {
            detailFragment = new DetailFragment();
        }
        detailFragment.setData(contentlistBean);
        detailFragment.setFragment(MainFragment.this);
        getFragmentManager()
                .beginTransaction()
                .setCustomAnimations(R.anim.fragment_right_to_left_enter, R.anim.fragment_right_to_left_exit)
                .replace(R.id.fm, detailFragment)
                .commit();
    }

    @Override
    public void onReceiveLocation(BDLocation bdLocation) {
        //Receive Location
        //经纬度
        double latitude = bdLocation.getLatitude();
        double longitude = bdLocation.getLongitude();
        String city = bdLocation.getCity();
        String addrStr = bdLocation.getAddrStr();
        Address address = bdLocation.getAddress();
        //打印出当前位置
        Log.e(TAG, "location.getAddrStr()=" + addrStr);
        //打印出当前城市
        Log.e(TAG, "location.getCity()=" + city);
        //返回码
        int i = bdLocation.getLocType();

        Bundle bundle = new Bundle();
        bundle.putDouble("latitude", latitude);
        bundle.putDouble("longitude", longitude);
        bundle.putString("city", city);
        bundle.putString("addrStr", addrStr);
        sendMessage(bundle, MSG_LOCATION_GOT);
    }

    private void initLocation() {
        Log.e(TAG, "initLocation: 初始化定位");
        LocationClientOption option = new LocationClientOption();
        option.setLocationMode(LocationClientOption.LocationMode.Battery_Saving);//可选，默认高精度，设置定位模式，高精度，低功耗，仅设备
        option.setCoorType("bd09ll");//可选，默认gcj02，设置返回的定位结果坐标系
        int span = 0;
        option.setScanSpan(span);//可选，默认0，即仅定位一次，设置发起定位请求的间隔需要大于等于1000ms才是有效的
        option.setIsNeedAddress(true);//可选，设置是否需要地址信息，默认不需要
        option.setOpenGps(false);//可选，默认false,设置是否使用gps
        option.setLocationNotify(false);//可选，默认false，设置是否当GPS有效时按照1S/1次频率输出GPS结果
        option.setIsNeedLocationDescribe(true);//可选，默认false，设置是否需要位置语义化结果，可以在BDLocation.getLocationDescribe里得到，结果类似于“在北京天安门附近”
        option.setIsNeedLocationPoiList(false);//可选，默认false，设置是否需要POI结果，可以在BDLocation.getPoiList里得到
        option.setIgnoreKillProcess(true);//可选，默认true，定位SDK内部是一个SERVICE，并放到了独立进程，设置是否在stop的时候杀死这个进程，默认不杀死
        option.SetIgnoreCacheException(false);//可选，默认false，设置是否收集CRASH信息，默认收集
        option.setEnableSimulateGps(false);//可选，默认false，设置是否需要过滤GPS仿真结果，默认需要
        mLocationClient.setLocOption(option);
    }

    @Override
    public void NetWorkChange(boolean isAvailable) {
        if (isAvailable) {
//            Toast.makeText(getActivity(), "网络状态变化==="+isAvailable, Toast.LENGTH_SHORT).show();
            Log.e(TAG, "NetWorkChange: 网络状态变化=" + isAvailable);
            tvNetworkState.setVisibility(View.GONE);
        }else {
            tvNetworkState.setVisibility(View.VISIBLE);
        }
    }
//
//    public class MyLocationListener implements BDLocationListener {
//
//        @Override
//        public void onReceiveLocation(BDLocation location) {
//
//            sendMessage(location,MSG_LOCATION_GOT);
//
//            //Receive Location
//            StringBuffer sb = new StringBuffer(256);
//            sb.append("time : ");
//            sb.append(location.getTime());
//            sb.append("\nerror code : ");
//            sb.append(location.getLocType());
//            sb.append("\nlatitude : ");
//            sb.append(location.getLatitude());
//            sb.append("\nlontitude : ");
//            sb.append(location.getLongitude());
//            sb.append("\nradius : ");
//            sb.append(location.getRadius());
//            Log.e(TAG, "onReceiveLocation:错误码= "+ BDLocation.TypeGpsLocation);
//            if (location.getLocType() == BDLocation.TypeGpsLocation) {// GPS定位结果
//                sb.append("\nspeed : ");
//                sb.append(location.getSpeed());// 单位：公里每小时
//                sb.append("\nsatellite : ");
//                sb.append(location.getSatelliteNumber());
//                sb.append("\nheight : ");
//                sb.append(location.getAltitude());// 单位：米
//                sb.append("\ndirection : ");
//                sb.append(location.getDirection());// 单位度
//                sb.append("\naddr : ");
//                sb.append(location.getAddrStr());
//                sb.append("\ndescribe : ");
//                sb.append("gps定位成功");
//
//            } else if (location.getLocType() == BDLocation.TypeNetWorkLocation) {// 网络定位结果
//                sb.append("\naddr : ");
//                sb.append(location.getAddrStr());
//                //运营商信息
//                sb.append("\noperationers : ");
//                sb.append(location.getOperators());
//                sb.append("\ndescribe : ");
//                sb.append("网络定位成功");
//            } else if (location.getLocType() == BDLocation.TypeOffLineLocation) {// 离线定位结果
//                sb.append("\ndescribe : ");
//                sb.append("离线定位成功，离线定位结果也是有效的");
//            } else if (location.getLocType() == BDLocation.TypeServerError) {
//                sb.append("\ndescribe : ");
//                sb.append("服务端网络定位失败，可以反馈IMEI号和大体定位时间到loc-bugs@baidu.com，会有人追查原因");
//            } else if (location.getLocType() == BDLocation.TypeNetWorkException) {
//                sb.append("\ndescribe : ");
//                sb.append("网络不同导致定位失败，请检查网络是否通畅");
//            } else if (location.getLocType() == BDLocation.TypeCriteriaException) {
//                sb.append("\ndescribe : ");
//                sb.append("无法获取有效定位依据导致定位失败，一般是由于手机的原因，处于飞行模式下一般会造成这种结果，可以试着重启手机");
//            }
//            sb.append("\nlocationdescribe : ");
//            sb.append(location.getLocationDescribe());// 位置语义化信息
//            List<Poi> list = location.getPoiList();// POI数据
//            if (list != null) {
//                sb.append("\npoilist size = : ");
//                sb.append(list.size());
//                for (Poi p : list) {
//                    sb.append("\npoi= : ");
//                    sb.append(p.getId() + " " + p.getName() + " " + p.getRank());
//                }
//            }
////            double longitude = location.getLongitude();
////            double latitude = location.getLatitude();
////            Log.e(TAG, "定位结果"+ longitude+"/"+latitude);
//            Log.e(TAG, "定位结果"+sb.toString());
//
//        }
//    }

}
